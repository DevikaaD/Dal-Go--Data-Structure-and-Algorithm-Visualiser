{"ast":null,"code":"import getBubbleSortAnimations from \"./getBubbleSortAnimations\";\nimport { changeBackgroundColor, changeBoxShadow, swapBars, resetBarStyleDefault, disableButtons, enableButtons, playCompletedSoundEffect } from \"../../HelperFunctions.js\";\nconst BubbleSort = async (array, animationSpeed, updateArray) => {\n  disableButtons();\n  const n = array.length;\n  let isSorted = false;\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < n - 1; i++) {\n      const comparingIndex1 = i;\n      const comparingIndex2 = i + 1;\n      await new Promise(resolve => {\n        setTimeout(() => {\n          if (array[comparingIndex1] > array[comparingIndex2]) {\n            const temp = array[comparingIndex1];\n            array[comparingIndex1] = array[comparingIndex2];\n            array[comparingIndex2] = temp;\n            updateArray([...array]);\n            isSorted = false;\n          }\n          resolve();\n        }, i * animationSpeed);\n      });\n    }\n  }\n  enableButtons();\n};\n_c = BubbleSort;\nexport default BubbleSort;\nvar _c;\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"names":["getBubbleSortAnimations","changeBackgroundColor","changeBoxShadow","swapBars","resetBarStyleDefault","disableButtons","enableButtons","playCompletedSoundEffect","BubbleSort","array","animationSpeed","updateArray","n","length","isSorted","i","comparingIndex1","comparingIndex2","Promise","resolve","setTimeout","temp","_c","$RefreshReg$"],"sources":["C:/Users/Devika/Desktop/Dal-Go--Data-Structure-and-Algorithm-Visualiser/Sorting Visualiser/src/SortingVisualizer/SortingAlgorithms/BubbleSort/BubbleSort.js"],"sourcesContent":["import getBubbleSortAnimations from \"./getBubbleSortAnimations\";\r\nimport {\r\n  changeBackgroundColor,\r\n  changeBoxShadow,\r\n  swapBars,\r\n  resetBarStyleDefault,\r\n  disableButtons,\r\n  enableButtons,\r\n  playCompletedSoundEffect,\r\n} from \"../../HelperFunctions.js\";\r\n\r\nconst BubbleSort = async (array, animationSpeed, updateArray) => {\r\n  disableButtons();\r\n\r\n  const n = array.length;\r\n  let isSorted = false;\r\n\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n      const comparingIndex1 = i;\r\n      const comparingIndex2 = i + 1;\r\n\r\n      await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          if (array[comparingIndex1] > array[comparingIndex2]) {\r\n            const temp = array[comparingIndex1];\r\n            array[comparingIndex1] = array[comparingIndex2];\r\n            array[comparingIndex2] = temp;\r\n            updateArray([...array]);\r\n            isSorted = false;\r\n          }\r\n          resolve();\r\n        }, i * animationSpeed);\r\n      });\r\n    }\r\n  }\r\n\r\n  enableButtons();\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default BubbleSort;\r\n"],"mappings":"AAAA,OAAOA,uBAAuB,MAAM,2BAA2B;AAC/D,SACEC,qBAAqB,EACrBC,eAAe,EACfC,QAAQ,EACRC,oBAAoB,EACpBC,cAAc,EACdC,aAAa,EACbC,wBAAwB,QACnB,0BAA0B;AAEjC,MAAMC,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,cAAc,EAAEC,WAAW,KAAK;EAC/DN,cAAc,EAAE;EAEhB,MAAMO,CAAC,GAAGH,KAAK,CAACI,MAAM;EACtB,IAAIC,QAAQ,GAAG,KAAK;EAEpB,OAAO,CAACA,QAAQ,EAAE;IAChBA,QAAQ,GAAG,IAAI;IAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,GAAG,CAAC,EAAEG,CAAC,EAAE,EAAE;MAC9B,MAAMC,eAAe,GAAGD,CAAC;MACzB,MAAME,eAAe,GAAGF,CAAC,GAAG,CAAC;MAE7B,MAAM,IAAIG,OAAO,CAAEC,OAAO,IAAK;QAC7BC,UAAU,CAAC,MAAM;UACf,IAAIX,KAAK,CAACO,eAAe,CAAC,GAAGP,KAAK,CAACQ,eAAe,CAAC,EAAE;YACnD,MAAMI,IAAI,GAAGZ,KAAK,CAACO,eAAe,CAAC;YACnCP,KAAK,CAACO,eAAe,CAAC,GAAGP,KAAK,CAACQ,eAAe,CAAC;YAC/CR,KAAK,CAACQ,eAAe,CAAC,GAAGI,IAAI;YAC7BV,WAAW,CAAC,CAAC,GAAGF,KAAK,CAAC,CAAC;YACvBK,QAAQ,GAAG,KAAK;UAClB;UACAK,OAAO,EAAE;QACX,CAAC,EAAEJ,CAAC,GAAGL,cAAc,CAAC;MACxB,CAAC,CAAC;IACJ;EACF;EAEAJ,aAAa,EAAE;AACjB,CAAC;AAACgB,EAAA,GA7BId,UAAU;AAmChB,eAAeA,UAAU;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}