{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devika\\\\Desktop\\\\Dal-Go--Data-Structure-and-Algorithm-Visualiser\\\\Sorting Visualiser\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React, { Component } from \"react\";\n// .. COMPONENTS .. //\nimport Header from \"./Components/Header/Header.jsx\";\nimport ButtonsBar from \"./Components/ButtonsBar/ButtonsBar.jsx\";\nimport ArrayBar from \"./Components/ArrayBar/ArrayBar.jsx\";\nimport RangeSlider from \"./Components/RangeSliders/RangeSlider.jsx\";\n// .. HELPER FUNCTIONS .. //\nimport { randomIntFromInterval, playAudio } from \"./HelperFunctions.js\";\n// .. ALGORITHMS .. //\nimport BubbleSort from \"./SortingAlgorithms/BubbleSort/BubbleSort.js\";\nimport SelectionSort from \"./SortingAlgorithms/SelectionSort/SelectionSort.js\";\nimport InsertionSort from \"./SortingAlgorithms/InsertionSort/InsertionSort.js\";\n// .. STYLE .. //\nimport \"./SortingVisualizer.css\";\n// .. SOUNDS .. //\nimport ResetEffect from \"./sounds/ResetEffect.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    // ******************************************************************************* //\n    // ## Handles if the \"Array Size\" slider is changed. ## //\n    this.onChangeArrayBarRangeSlider = (event, value) => {\n      this.setState({\n        numberOfArrayBars: value\n      });\n      this.generateNewArray();\n    };\n    // ## Handles if the \"Animation Speed\" slider is changed. ## //\n    this.onChangeAnimationSpeedRangeSlider = (event, value) => {\n      this.setState({\n        animationSpeed: value\n      });\n    };\n    // ******************************************************************************* //\n    // ## Calls the BubbleSort component/function. ## //\n    this.bubbleSort = () => {\n      BubbleSort(this.state.array, this.state.animationSpeed, this.updateArray);\n    };\n    // ## Calls the SelectionSort component/function. ## //\n    this.selectionSort = () => {\n      SelectionSort(this.state.array, this.state.animationSpeed);\n    };\n    // ## Calls the InsertionSort component/function. ## //\n    this.insertionSort = () => {\n      InsertionSort(this.state.array, this.state.animationSpeed);\n    };\n    this.state = {\n      //  // ##\n      //        Initializing in state because:\n      //         1. It might be changed later by the user.\n      //         2. The change value must be re-rendered.\n      // ## //\n      array: [],\n      animationSpeed: 50,\n      numberOfArrayBars: 10,\n      userInputArray: []\n    };\n    this.handleUserInputArray = event => {\n      const value = event.target.value;\n      const array = value.split(\",\").map(Number); // Convert input string to array of numbers\n      this.setState({\n        userInputArray: array\n      });\n    };\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n    this.selectionSort = this.selectionSort.bind(this);\n    this.insertionSort = this.insertionSort.bind(this);\n    this.onChangeArrayBarRangeSlider = this.onChangeArrayBarRangeSlider.bind(this);\n    this.onChangeAnimationSpeedRangeSlider = this.onChangeAnimationSpeedRangeSlider.bind(this);\n    this.swapArrayValues = this.swapArrayValues.bind(this);\n  }\n\n  // ## This function generates the array before the page is rendere. ## //\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  // ## This function generates new random array of size \"numberOfArrayBars\". ## //\n  generateNewArray() {\n    let array = [];\n    if (this.state.userInputArray.length > 0) {\n      // If user input array exists\n      array = [...this.state.userInputArray];\n    } else {\n      // Generate random array\n      for (let i = 0; i < this.state.numberOfArrayBars; i++) {\n        array.push(randomIntFromInterval(5, 70));\n      }\n    }\n    playAudio(ResetEffect);\n    this.setState({\n      array\n    });\n  }\n  swapArrayValues(index1, index2) {\n    const newArray = [...this.state.array];\n    [newArray[index1], newArray[index2]] = [newArray[index2], newArray[index1]];\n    this.setState({\n      array: newArray\n    });\n  }\n  // ******************************************************************************* //\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonsBar, {\n        generateNewArray: this.generateNewArray,\n        bubbleSort: () => BubbleSort(this.state.array, this.state.animationSpeed, this.swapArrayValues),\n        selectionSort: () => SelectionSort(this.state.array, this.state.animationSpeed, this.swapArrayValues),\n        insertionSort: () => InsertionSort(this.state.array, this.state.animationSpeed, this.swapArrayValues)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"user-input\",\n          children: \"Input your own array:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"user-input\",\n          name: \"user-input\",\n          onChange: this.handleUserInputArray\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ArrayBar, {\n        array: this.state.array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RangeSlider, {\n        numberOfArrayBars: this.state.numberOfArrayBars,\n        animationSpeed: this.state.animationSpeed,\n        onChangeArrayBarRangeSlider: this.onChangeArrayBarRangeSlider,\n        onChangeAnimationSpeedRangeSlider: this.onChangeAnimationSpeedRangeSlider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Header","ButtonsBar","ArrayBar","RangeSlider","randomIntFromInterval","playAudio","BubbleSort","SelectionSort","InsertionSort","ResetEffect","jsxDEV","_jsxDEV","SortingVisualizer","constructor","props","onChangeArrayBarRangeSlider","event","value","setState","numberOfArrayBars","generateNewArray","onChangeAnimationSpeedRangeSlider","animationSpeed","bubbleSort","state","array","updateArray","selectionSort","insertionSort","userInputArray","handleUserInputArray","target","split","map","Number","bind","swapArrayValues","componentDidMount","length","i","push","index1","index2","newArray","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","name","onChange"],"sources":["C:/Users/Devika/Desktop/Dal-Go--Data-Structure-and-Algorithm-Visualiser/Sorting Visualiser/src/SortingVisualizer/SortingVisualizer.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\n// .. COMPONENTS .. //\r\nimport Header from \"./Components/Header/Header.jsx\";\r\nimport ButtonsBar from \"./Components/ButtonsBar/ButtonsBar.jsx\";\r\nimport ArrayBar from \"./Components/ArrayBar/ArrayBar.jsx\";\r\nimport RangeSlider from \"./Components/RangeSliders/RangeSlider.jsx\";\r\n// .. HELPER FUNCTIONS .. //\r\nimport { randomIntFromInterval, playAudio } from \"./HelperFunctions.js\";\r\n// .. ALGORITHMS .. //\r\nimport BubbleSort from \"./SortingAlgorithms/BubbleSort/BubbleSort.js\";\r\nimport SelectionSort from \"./SortingAlgorithms/SelectionSort/SelectionSort.js\";\r\nimport InsertionSort from \"./SortingAlgorithms/InsertionSort/InsertionSort.js\";\r\n// .. STYLE .. //\r\nimport \"./SortingVisualizer.css\";\r\n// .. SOUNDS .. //\r\nimport ResetEffect from \"./sounds/ResetEffect.mp3\";\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      //  // ##\r\n      //        Initializing in state because:\r\n      //         1. It might be changed later by the user.\r\n      //         2. The change value must be re-rendered.\r\n      // ## //\r\n      array: [],\r\n      animationSpeed: 50,\r\n      numberOfArrayBars: 10,\r\n      userInputArray: []\r\n    };\r\n    this.handleUserInputArray = (event) => {\r\n      const value = event.target.value;\r\n      const array = value.split(\",\").map(Number); // Convert input string to array of numbers\r\n      this.setState({ userInputArray: array });\r\n    };\r\n    \r\n\r\n    this.generateNewArray = this.generateNewArray.bind(this);\r\n    this.bubbleSort = this.bubbleSort.bind(this);\r\n    this.selectionSort = this.selectionSort.bind(this);\r\n    this.insertionSort = this.insertionSort.bind(this);\r\n    this.onChangeArrayBarRangeSlider = this.onChangeArrayBarRangeSlider.bind(\r\n      this\r\n    );\r\n    this.onChangeAnimationSpeedRangeSlider = this.onChangeAnimationSpeedRangeSlider.bind(\r\n      this\r\n    );\r\n    this.swapArrayValues = this.swapArrayValues.bind(this);\r\n  }\r\n\r\n  // ## This function generates the array before the page is rendere. ## //\r\n  componentDidMount() {\r\n    this.generateNewArray();\r\n  }\r\n\r\n  // ## This function generates new random array of size \"numberOfArrayBars\". ## //\r\n  generateNewArray() {\r\n    let array = [];\r\n  if (this.state.userInputArray.length > 0) { // If user input array exists\r\n    array = [...this.state.userInputArray];\r\n  } else { // Generate random array\r\n    for (let i = 0; i < this.state.numberOfArrayBars; i++) {\r\n      array.push(randomIntFromInterval(5, 70));\r\n    }\r\n  }\r\n  playAudio(ResetEffect);\r\n  this.setState({ array });\r\n  }\r\n\r\n  // ******************************************************************************* //\r\n\r\n  // ## Handles if the \"Array Size\" slider is changed. ## //\r\n  onChangeArrayBarRangeSlider = (event, value) => {\r\n    this.setState({ numberOfArrayBars: value });\r\n    this.generateNewArray();\r\n  };\r\n\r\n  // ## Handles if the \"Animation Speed\" slider is changed. ## //\r\n  onChangeAnimationSpeedRangeSlider = (event, value) => {\r\n    this.setState({ animationSpeed: value });\r\n  };\r\n\r\n  swapArrayValues(index1, index2) {\r\n    const newArray = [...this.state.array];\r\n    [newArray[index1], newArray[index2]] = [newArray[index2], newArray[index1]];\r\n    this.setState({ array: newArray });\r\n  }\r\n\r\n  // ******************************************************************************* //\r\n\r\n  // ## Calls the BubbleSort component/function. ## //\r\n  bubbleSort = () => {\r\n    BubbleSort(this.state.array, this.state.animationSpeed, this.updateArray);\r\n  };\r\n\r\n  // ## Calls the SelectionSort component/function. ## //\r\n  selectionSort = () => {\r\n    SelectionSort(this.state.array, this.state.animationSpeed);\r\n  };\r\n\r\n  // ## Calls the InsertionSort component/function. ## //\r\n  insertionSort = () => {\r\n    InsertionSort(this.state.array, this.state.animationSpeed);\r\n  };\r\n  \r\n  \r\n\r\n  // ******************************************************************************* //\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        {/* --------------------- HEADER : 8% Height --------------------- */}\r\n        <Header />\r\n\r\n        {/* --------------------- BUTTONS : 10% Height --------------------- */}\r\n        <ButtonsBar\r\n          generateNewArray={this.generateNewArray}\r\n          bubbleSort={() => BubbleSort(this.state.array, this.state.animationSpeed, this.swapArrayValues)}\r\n          selectionSort={() => SelectionSort(this.state.array, this.state.animationSpeed, this.swapArrayValues)}\r\n          insertionSort={() => InsertionSort(this.state.array, this.state.animationSpeed, this.swapArrayValues)}\r\n        />\r\n        {/* --------------------- USER INPUT : 3% Height --------------------- */}\r\n        <div className=\"input-container\">\r\n         <label htmlFor=\"user-input\">Input your own array:</label>\r\n         <input type=\"text\" id=\"user-input\" name=\"user-input\" onChange={this.handleUserInputArray} />\r\n        </div>\r\n\r\n\r\n        {/* --------------------- BARS : 74% Height --------------------- */}\r\n        <ArrayBar array={this.state.array} />\r\n\r\n        {/* --------------------- SLIDERS : 8% Height --------------------- */}\r\n        <RangeSlider\r\n          numberOfArrayBars={this.state.numberOfArrayBars}\r\n          animationSpeed={this.state.animationSpeed}\r\n          onChangeArrayBarRangeSlider={this.onChangeArrayBarRangeSlider}\r\n          onChangeAnimationSpeedRangeSlider={\r\n            this.onChangeAnimationSpeedRangeSlider\r\n          }\r\n        />\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}